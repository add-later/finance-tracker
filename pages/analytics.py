import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import plotly.express as px
import datetime
import os
from dotenv import load_dotenv
import json


try:
    SHEET_URL = st.secrets["SHEET_URL"]
    data = json.loads(st.secrets["COLUMN_LIST"])
    data = json.loads(st.secrets["COLUMN_LIST"])
    credentials=json.loads(st.secrets["CREDENTIALS"])
except:
    load_dotenv('../.env')
    SHEET_URL = os.environ["SHEET_URL"]
    data = json.loads(os.environ["COLUMN_LIST"])
    credentials=json.loads(os.environ["CREDENTIALS"])


# ---------------- Google Sheets Setup ----------------
scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]

creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials, scope)
client = gspread.authorize(creds)

sheet = client.open_by_url(SHEET_URL).sheet1

# ---------------- Load Data ----------------
@st.cache_data
def load_data():
    data = sheet.get_all_records()
    df = pd.DataFrame(data)
    df["date"] = pd.to_datetime(df["date"])
    return df

df = load_data()

st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤")

# ---------------- Time Filter ----------------
period = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
    ["–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ö–≤–∞—Ä—Ç–∞–ª", "–ì–æ–¥", "–í—Å–µ –≤—Ä–µ–º—è"]
)

today = datetime.date.today()

if period == "–î–µ–Ω—å":
    df_period = df[df["date"].dt.date == today]
elif period == "–ù–µ–¥–µ–ª—è":
    week_start = today - datetime.timedelta(days=today.weekday())
    df_period = df[(df["date"].dt.date >= week_start) & (df["date"].dt.date <= today)]
elif period == "–ú–µ—Å—è—Ü":
    df_period = df[(df["date"].dt.month == today.month) & (df["date"].dt.year == today.year)]
elif period == "–ö–≤–∞—Ä—Ç–∞–ª":
    df_period = df[(df["date"].dt.to_period("Q") == pd.Period(today, freq="Q"))]
elif period == "–ì–æ–¥":
    df_period = df[df["date"].dt.year == today.year]
else:
    df_period = df

if df_period.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    st.stop()

# ---------------- Income / Expenses Aggregation ----------------
income_cols = [col for col in df.columns if col.startswith("–î–æ—Ö–æ–¥—ã")]
expense_cols = [col for col in df.columns if col.startswith("–†–∞—Å—Ö–æ–¥—ã")]

df_period["–î–æ—Ö–æ–¥—ã"] = df_period[income_cols].sum(axis=1)
df_period["–†–∞—Å—Ö–æ–¥—ã"] = df_period[expense_cols].sum(axis=1)

total_income = df_period["–î–æ—Ö–æ–¥—ã"].sum()
total_expenses = df_period["–†–∞—Å—Ö–æ–¥—ã"].sum()
balance = total_income - total_expenses

col1, col2, col3 = st.columns(3)
col1.metric("üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", f"{balance:,.0f} ‚Ç∏")
col2.metric("üìà –î–æ—Ö–æ–¥—ã", f"{total_income:,.0f} ‚Ç∏")
col3.metric("üìâ –†–∞—Å—Ö–æ–¥—ã", f"{total_expenses:,.0f} ‚Ç∏")

st.write("---")

# ---------------- Expenses Distribution ----------------
expenses_long = df_period.melt(
    id_vars=["date"], value_vars=expense_cols,
    var_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", value_name="–°—É–º–º–∞"
)
expenses_long = expenses_long[expenses_long["–°—É–º–º–∞"] > 0]

if not expenses_long.empty:
    expenses_long[["–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"]] = expenses_long["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].str.split("-", 2, expand=True)

    category_summary = expenses_long.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")["–°—É–º–º–∞"].sum().reset_index()
    fig_cat = px.pie(category_summary, names="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", values="–°—É–º–º–∞", title="üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    st.plotly_chart(fig_cat, use_container_width=True)

    selected_category = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏", category_summary["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].unique())
    subcat_summary = expenses_long[expenses_long["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == selected_category]
    subcat_summary = subcat_summary.groupby("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è")["–°—É–º–º–∞"].sum().reset_index()

    fig_subcat = px.bar(subcat_summary, x="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", y="–°—É–º–º–∞", title=f"üìÇ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {selected_category}")
    st.plotly_chart(fig_subcat, use_container_width=True)
else:
    st.info("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")

# ---------------- Income Distribution (–í—ã—Ä—É—á–∫–∞ –¶–£–ú / –ì–∞–ª–µ—Ä–µ—è) ----------------
income_long = df_period.melt(
    id_vars=["date"], value_vars=income_cols,
    var_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", value_name="–°—É–º–º–∞"
)
income_long = income_long[income_long["–°—É–º–º–∞"] > 0]
income_long[["–¢–∏–ø", "–ú–∞–≥–∞–∑–∏–Ω", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"]] = (
    income_long["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"].str.split("-", n=2, expand=True)
)


# Filter only "–í—ã—Ä—É—á–∫–∞"
income_vyruchka = income_long[income_long["–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"] == "–í—ã—Ä—É—á–∫–∞"]
if not income_vyruchka.empty:
    vyruchka_summary = income_vyruchka.groupby("–ú–∞–≥–∞–∑–∏–Ω")["–°—É–º–º–∞"].sum().reset_index()
    fig_income_pie = px.pie(vyruchka_summary, names="–ú–∞–≥–∞–∑–∏–Ω", values="–°—É–º–º–∞", title="üè™ –î–æ—Ö–æ–¥—ã (–í—ã—Ä—É—á–∫–∞: –¶–£–ú vs –ì–∞–ª–µ—Ä–µ—è)")
    st.plotly_chart(fig_income_pie, use_container_width=True)

st.write("---")

# ---------------- Income Trend ----------------
income_trend = df_period.groupby("date")[income_cols].sum().sum(axis=1).reset_index(name="–î–æ—Ö–æ–¥—ã")
if not income_trend.empty:
    fig_income = px.line(income_trend, x="date", y="–î–æ—Ö–æ–¥—ã", title="üìà –î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤")
    st.plotly_chart(fig_income, use_container_width=True)

# ---------------- Expenses Trend ----------------
expense_trend = df_period.groupby("date")[expense_cols].sum().sum(axis=1).reset_index(name="–†–∞—Å—Ö–æ–¥—ã")
if not expense_trend.empty:
    fig_expense = px.line(expense_trend, x="date", y="–†–∞—Å—Ö–æ–¥—ã", title="üìâ –î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
    st.plotly_chart(fig_expense, use_container_width=True)

# ---------------- Cumulative Balance Trend ----------------
balance_trend = (
    df_period.groupby("date")[income_cols + expense_cols]
    .sum()
    .reset_index()
)
balance_trend["–î–æ—Ö–æ–¥—ã"] = balance_trend[income_cols].sum(axis=1)
balance_trend["–†–∞—Å—Ö–æ–¥—ã"] = balance_trend[expense_cols].sum(axis=1)
balance_trend["–ë–∞–ª–∞–Ω—Å"] = (balance_trend["–î–æ—Ö–æ–¥—ã"] - balance_trend["–†–∞—Å—Ö–æ–¥—ã"]).cumsum()

fig_balance = px.line(
    balance_trend, x="date", y="–ë–∞–ª–∞–Ω—Å", title="üíπ –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å"
)
st.plotly_chart(fig_balance, use_container_width=True)
